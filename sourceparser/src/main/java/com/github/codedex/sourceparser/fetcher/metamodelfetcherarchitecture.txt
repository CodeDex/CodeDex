author: Patrick "IPat" Hein

IDEA #1:

MetaModelFetchers are the main carriers, they fetch the data from their input and build a MetaModel from it.

PROBLEM #1:

Multiple MetaModelFetchers for a backup system if a fetcher can't deliver a certain value are not self-explanatory

    SOLUTION #1a:

    Multiple MetaModelFetchers don't exist as a team (Bad Solution)

    SOLUTION #1b:

    Prioritized MetaModelFetcher teams by providing a MetaModelBuilder class which uses a MetaModelFetcher priority list / queue as a parameter.


18.04.17 20:08 - WORK ON #1b (Restructuring of MetaModel economy)

DESCRIPTION #1b:

Meta*s are only containers for the information. They are supposed to be immutable once created.
NOTE: The final design decision is that they are only mutable via their getUpdate() method which returns an interface to modify the Meta*.

*Fetchers have the functionality of using input to fetch necessary information for the Meta*s.
As every *Fetchers output is data which needs to use an output container output anyways, they're also the Builders.
This, however, brings up PROBLEM #1. This can be avoided by using a PriorityFetcher, which manages a list of fetchers in its system.


Successfully converted:

MetaModel
MetaPlaceholder
MetaPackage
MetaType
MetaClass
MetaInterface
MetaMethod


To be converted:

Subclasses of MetaClass
Every Meta* within the object context (besides MetaMethod), but those need to be created in the first place.